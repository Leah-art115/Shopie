generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                Int               @id @default(autoincrement())
  fullName          String
  email             String            @unique
  phone             String?           @unique
  password          String
  role              Role              @default(USER)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  shippingAddress   ShippingAddress?  @relation("UserShippingAddress")
  shippingAddressId Int?              @unique

  products          Product[]         @relation("UserProducts")
  cartItems         Cart[]            @relation("UserCartItems")
  likedProducts     LikedProduct[]    @relation("UserLikedProducts")
  orders            Order[]           @relation("UserOrders")
  reviews           Review[]          @relation("UserReviews")
}

model ShippingAddress {
  id        Int    @id @default(autoincrement())
  region    String
  subcounty String
  town      String
  userId    Int    @unique
  user      User   @relation("UserShippingAddress", fields: [userId], references: [id])
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  sale        Boolean          @default(false)
  salePrice   Float?
  isNew       Boolean          @default(false)
  isHot       Boolean          @default(false)
  isTrending  Boolean          @default(false)
  isDeleted   Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  sellerId    Int
  seller      User             @relation("UserProducts", fields: [sellerId], references: [id])
  images      ProductImage[]
  categories  ProductCategory[]
  cartItems   Cart[]           @relation("ProductInCart")
  likedBy     LikedProduct[]
  orders      Order[]
  reviews     Review[]         @relation("ProductReviews")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Category {
  id       Int              @id @default(autoincrement())
  name     String           @unique
  products ProductCategory[]
}

model ProductCategory {
  productId  Int
  categoryId Int
  product    Product  @relation(fields: [productId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

model Cart {
  id        Int     @id @default(autoincrement())
  userId    Int
  productId Int
  user      User    @relation("UserCartItems", fields: [userId], references: [id])
  product   Product @relation("ProductInCart", fields: [productId], references: [id])
}

model LikedProduct {
  id        Int     @id @default(autoincrement())
  userId    Int
  productId Int
  user      User    @relation("UserLikedProducts", fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id        Int     @id @default(autoincrement())
  userId    Int
  productId Int
  status    String
  user      User    @relation("UserOrders", fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id        Int     @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  userId    Int
  productId Int

  user    User    @relation("UserReviews", fields: [userId], references: [id])
  product Product @relation("ProductReviews", fields: [productId], references: [id])
}

